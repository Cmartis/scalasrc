package fpinscala.datastructures
//add updates for local sync

sealed trait List[+A]
case object Nil extends List[Nothing]
case class Cons[+A](head: A, tail: List[A]) extends List[A]

object List {
  def sum(insts: List[Int]): Int = insts match{
    case Nil => 0
    case Cons(x, xs) => x + sum(xs)
  }

  def product(ds: List[Double]): Double = ds match{
    case Nil => 1.0
    case Cons(0.0, _) => 0.0
    case Cons(x, xs) => x * product(xs)
  }

  def apply[A](as: A*): List[A] =
    if (as.isEmpty) Nil
    else Cons(as.head, apply(as.tail: _*))


   def tail[A](l:List[A]): List[A]=
     l match {
      case Nil => Nil
      case Cons(_, t) => t
    }

    def drop[A](l:List[A], n:Int): List[A]=
        if (n <= 0) l
        else
          l match {
            case Nil => Nil
            case Cons(_, t) => drop(t, n-1)
          }

    def dropWhile[A](l: List[A], f: A => Boolean): List[A] =
          l match {
            case Cons(h, t) if f(h) => dropWhile(t, f)
            case _ => l
          }

    def dropWhile1[A](l: List[A]) (f: A => Boolean): List[A] =
      l match {
        case Cons(h, t) if f(h) => dropWhile1(t)(f)
        case _ => l
      }

    def setHead[A](l:List[A], he: A): List[A]=
      l match {
      case Nil => Cons(he, Nil)
      case Cons(_, t) => Cons(he, t)
    }


    def append[A](l:List[A], r:List[A]): List[A]=
      l match {
      case Nil => r
      case Cons(h, t) => Cons(h, append(t, r))
    }

    def init[A](l: List[A]): List[A]=
      l match {
      case Nil => Nil
      case Cons(h, Nil) => Nil
      case Cons(h, t) => Cons(h, init(t))
    }

    def foldRight[A, B](as: List[A], z: B) (f: (A, B) => B): B =
      as match {
      case Nil => z
      case Cons(x, xs) => f(x, foldRight(xs, z) (f))
    }


    def sum2(ns: List[Int]) =
      foldRight(ns, 0)((x, y) => x + y)

    def product2(ns: List[Double]) =
      foldRight(ns, 1.0) (_*_)

    def length[A](ns: List[A]): Int =
      foldRight(ns, 0)((_, acc) => acc + 1)

    @annotation.tailrec
    def foldLeft[A, B](as: List[A], z: B) (f: (B, A) => B): B =
      as match {
      case Nil => z
      case Cons(h, t) => foldLeft(t, f(z, h))(f)
    }

    def sum3(l: List[Int]) = foldLeft(l, 0)(_ + _)

    def product3(l: List[Double]) = foldLeft(l, 1.0)(_ * _)

    def length2[A](l: List[A]): Int = foldLeft(l, 0)((acc,_) => acc + 1)

    def reverse[A](l: List[A]): List[A] = foldLeft(l, List[A]())((acc, h) => Cons(h, acc))

    def append1[A](l:List[A], r:List[A]): List[A]=
      foldRight(l, r) (Cons(_,_))

    def concat[A](l: List[List[A]]): List[A] =
      foldRight(l, Nil:List[A])(append)
      
    def addOne(l: List[Int]): List[Int]=
      foldRight(l, Nil:List[Int])((h,t) => Cons(h+1, t))
  
    def dString(l: List[Double]): List[String]=
      foldRight(l, Nil:List[String])((h,t) => Cons(h.toString, t))
      
    def map[A,B](l: List[A])(f: A => B): List[B] = 
      foldRight(l, Nil:List[B])((h,t) => Cons(f(h),t))
      
    def filter[A](l: List[A])(f: A => Boolean): List[A] = 
      foldRight(l, Nil:List[A])((h,t) => if (f(h)) Cons(h, t) else t)
      
    def flatMap[A,B](l: List[A])(f: A => List[B]): List[B] =
      concat(map(l)(f))
  
    def filterViaFlatMap[A](l: List[A])(f: A => Boolean): List[A] =
      flatMap(l)(a => if (f(a)) List(a) else Nil)

    def addPairWise(l1: List[Int], l2: List[Int]): List[Int] = (l1, l2) match {
        case (Nil, _) => Nil
        case (_, Nil) => Nil
        case(Cons(h1, t1), Cons(h2, t2)) => Cons(h1+h2, addPairWise(t1, t2))
      }
    
    def zipWith[A,B,C](a: List[A], b: List[B])(f: (A,B) => C): List[C] = (a,b) match {
        case (Nil, _) => Nil
        case (_, Nil) => Nil
        case (Cons(h1,t1), Cons(h2,t2)) => Cons(f(h1,h2), zipWith(t1,t2)(f))
      }
      
 }
